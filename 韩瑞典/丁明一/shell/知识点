子串截取的三种用法：
${变量名:起始位置:长度}  起始位置从0开始
expr substr "$变量名" 起始位置 长度  起始位置从1开始
echo $变量名 | cut -b 起始位置-结束位置  起始位置从1开始

子串替换的两种用法：
只替换第一个匹配结果：${变量名/old/new}
替换全部匹配结果：${变量名//old/new}

字符串掐头去尾：
从左向右，最短匹配删除：${变量名#*关键词}
从左向右，最长匹配删除：${变量名##*关键词}
从右向左，最短匹配删除：${变量名%关键词*}
从右向左，最长匹配删除：${变量名%%关键词*

字符串初值的处理:
${var:-word}若变量var已存在且非Null，则返回 $var 的值；否则返回字串“word”，原变量var的值不受影响。

总结知识点：
#sed [选项] '条件指令' 文件
选项:
-n 屏蔽默认输出
-r 支持扩展正则
-i 修改源文件
条件：
行号 4 4,5 4~2 4,+10
/正则/
指令：
p 打印
d 删除
s 替换s/旧/新/g
a 追加
i 插入
c 替换行
sed 's/\b[a-z]/\u&/g'  首字母大写
sed -e '1a xxx' -e '2c xxx' /etc/passwd

awk文本过滤的基本用法
1）基本操作方法
格式：awk [选项] '[条件]{指令}' 文件
print:打印；有多条编辑指令，用分号分隔。
Awk过滤数据时支持仅打印某一列，
处理文本时，若未指定分隔符，则默认将空格、制表符等作为分隔符。
选项 -F 可指定分隔符
$0 文本当前行的全部内容
$1	文本的第1列
NR	文件当前行的行号
NF	文件当前行的列数（有几列）
打印常量必须加引号

格式化输出/etc/passwd文件
1）awk处理的时机
awk会逐行处理文本，支持在处理第一行之前做一些准备工作，以及在处理完最后一行之后做一些总结性质的工作。在命令格式上分别体现如下：
awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件
BEGIN{ } 行前处理，读取文件内容前执行，指令执行1次
{ } 逐行处理，读取文件过程中执行，指令执行n次
END{ } 行后处理，读取文件结束后执行，指令执行1次
只做预处理的时候，可以没有操作文件  # awk 'BEGIN{print x+1}'  “\t”显示Tab制表位
column -t 制表位

awk处理条件的设置
1）使用正则设置条件  !~反向匹配  /正则/--》全行匹配   $1~/root/--》第一列匹配root  
2）使用数值/字符串比较设置条件
比较符号：==(等于) !=（不等于） >（大于）>=（大于等于） <（小于） <=（小于等于）

awk流程控制
awk过滤中的if分支结构
1）单分支  统计/etc/passwd文件中UID小于或等于1000的用户个数：                    if(判断){
awk -F: '{if($3<=1000){i++}}END{print i}' /etc/passwd                命令
2）双分支  统计/etc/passwd文件中UID小于或等于1000、UID大于1000的用户个数：      } 
awk -F: '{if($3<=1000){i++}else{j++}}END{print i,j}' /etc/passwd
awk数组
1）数组的语法格式
数组是一个可以存储多个值的变量，具体使用的格式如下：
定义数组的格式：数组名[下标]=元素值    #下标从0开始
调用数组的格式：数组名[下标]
遍历数组的用法：for(变量 in 数组名){print 数组名[变量]}。
注意，awk数组的下标除了可以使用数字，也可以使用字符串，字符串需要使用双引号：


awk -F: '/'$i'/{print $1,$2}' /etc/shadow
i=root awk -F: -v x=$i '$1==x' /etc/shadow


/var/log/httpd/access_log http日志文件   一行为以人
ab -c100 -n100000 http://192.168.4.254/  模拟100人访问本次网站10000次
awk 'ip[$1]++' 文件
awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' /var/log/httpd/access_log | awk '$1>10000' #单ip访问1000次以上的过滤出来 sort -n #数字从小到大排序  sort -rn #从大到小
