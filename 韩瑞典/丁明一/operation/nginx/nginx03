案例1:Nginx反向代理
一、部署实施后端Web服务器
二、配置Nginx服务器，添加服务器池，实现反向代理功能
修改/usr/local/nginx/conf/nginx.conf配置文件
http {
.. ..
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口
upstream webserver {
           server 192.168.2.100:80;
           server 192.168.2.200:80;
        }
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
	        #通过proxy_pass将用户的请求转发给webserver集群
            proxy_pass http://webserver;
        }
}

配置upstream服务器集群池属性
1.设置失败次数，超时时间，权重
weight设置后台服务器的权重，max_fails设置后台服务器的失败次数，fail_timeout设置后台服务器的失败超时时间。
http {
.. ..
upstream webserver {
           server 192.168.2.100 weight=1 max_fails=1 fail_timeout=30;
           server 192.168.2.200 weight=2 max_fails=2 fail_timeout=30;
           server 192.168.2.101 down;
        }
	#weight设置服务器权重值，默认值为1
	#max_fails设置最大失败次数
	#fail_timeout设置失败超时时间，单位为秒
	#down标记服务器已关机，不参与集群调度
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
            proxy_pass http://webserver;
        }
}

配置upstream服务器集群的调度算法
1.设置相同客户端访问相同Web服务器
http {
.. ..
upstream webserver {
              #通过ip_hash设置调度规则为：相同客户端访问相同服务器
           ip_hash;
           server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
           server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;
        }
.. ..
server {
        listen        80;
        server_name  www.tarena.com;
            location / {
            proxy_pass http://webserver;
        }
}

案例2：Nginx的TCP/UDP调度器（nginx1.9以上的版本）
步骤一：部署支持4层TCP/UDP代理的Nginx服务器
1）部署nginx服务器
编译安装必须要使用--with-stream参数开启4层代理模块
[root@proxy ~]# yum –y install gcc pcre-devel openssl-devel   //安装依赖包
[root@proxy ~]# tar  -xf   nginx-1.12.2.tar.gz
[root@proxy ~]# cd  nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure   \
> --with-http_ssl_module                               //开启SSL加密功能
> --with-stream                                       //开启4层反向代理功能
[root@proxy nginx-1.12.2]# make && make install           //编译并安装

步骤二：配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
修改/usr/local/nginx/conf/nginx.conf配置文件
stream {
          upstream backend {
             server 192.168.2.100:22;            //后端SSH服务器的IP和端口
             server 192.168.2.200:22;
	     }
            server {
                		listen 12345;              //Nginx监听的端口
                		proxy_connect_timeout 1s;
                		proxy_timeout 3s;
                 		proxy_pass backend;
             		 }
}
http {
.. ..
}

案例3：Nginx常见问题处理
步骤二：优化Nginx并发量
[root@proxy ~]# ab -n 次数 -c 人数 http://192.168.4.5/   //模拟高并发测试

修改Nginx配置文件，增加并发量
worker_processes  2;                    //与CPU核心数量一致
events {
worker_connections 65535;        //每个worker最大并发连接数
use epoll;
}

优化Linux内核参数（最大文件数量）
[root@proxy ~]# ulimit -a                        //查看所有属性值
[root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）
[root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
[root@proxy ~]# vim /etc/security/limits.conf
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000
#该配置文件分4列，分别如下：
#用户或组    硬限制或软限制    需要限制的项目   限制的值

步骤三：优化Nginx数据包头缓存
修改Nginx配置文件，增加数据包头部缓存大小
.. ..
http {
client_header_buffer_size    1k;        //默认请求包头信息的缓存    
large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
.. ..
}

步骤四：浏览器本地缓存静态数据
以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息，点击List Cache Entries可以查看详细信息
修改Nginx配置文件，定义对静态页面的缓存时间
server {
.. ..
location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
expires        30d;            //定义客户端缓存时间为30天
}
}

步骤五：自定义报错页面
修改Nginx配置文件，自定义报错页面
.. ..
error_page   404  /40x.html;    //自定义错误页面
.. ..
[root@proxy ~]# vim /usr/local/nginx/html/40x.html        //生成错误页面
Oops,No NO no page …

步骤六：如何查看服务器状态信息
1.编译安装时使用--with-http_stub_status_module开启状态页面模块
2.修改Nginx配置文件，定义状态页面

… …
location /status {
                stub_status on;
		allow ip;  //自己看，可加可不加
		deny all;
        }
… …

3.查看状态页面信息
[root@proxy ~]# curl  http://192.168.4.5/status
Active connections: 1 
server accepts handled requests
 10 10 3 
Reading: 0 Writing: 1 Waiting: 0
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。

步骤七：对页面进行压缩处理
修改Nginx配置文件
[root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
http {
.. ..
gzip on;                            //开启压缩
gzip_min_length 1000;                //小文件不压缩
gzip_comp_level 4;                //压缩比率
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                    //对特定文件压缩，类型参考mime.types
.. ..
}

步骤八：服务器内存缓存
如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。
http { 
open_file_cache          max=2000  inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
//文件句柄的有效时间是60秒，60秒后过期
//只有访问次数超过5次会被缓存
} 













