tomcat日志 catalina.2018-08-25.log
案例1：安装部署Tomcat服务器
步骤一：部署Tomcat服务器软件
1）使用RPM安装JDK环境
[root@web1 ~]# yum –y install  java-1.8.0-openjdk             //安装JDK
[root@web1 ~]# yum -y install java-1.8.0-openjdk-headless     //安装JDK
[root@web1 ~]# java -version                                  //查看JAVA版本
2）安装Tomcat
Tomcat主要目录
bin/                    //主程序目录
lib/               //库文件目录
logs/                     //日志目录  
temp/                      //临时目录
work/                      //自动编译目录jsp代码转换servlet
conf/                       //配置文件目录
webapps/                   //页面目录
3）启动服务
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh
4）服务器验证端口信息
[root@web1 ~]# netstat -nutlp |grep java        //查看java监听的端口
tcp        0      0 :::8080       :::*     LISTEN      2778/java           
tcp        0      0 ::ffff:127.0.0.1:8005     :::*    LISTEN 2778/java  

步骤二：修改Tomcat配置文件
1）创建测试JSP页面
[root@web1 ~]# vim  /usr/local/tomcat/webapps/ROOT/test.jsp
<html>
<body>
<center>
Now time is: <%=new java.util.Date()%>            //显示服务器当前时间
</center>
</body>
</html>

2）重启服务
[root@web1 ~]# /usr/local/tomcat/bin/shutdown.sh
[root@web1 ~]# /usr/local/tomcat/bin/startup.sh

案例2：使用Tomcat部署虚拟主机
访问页面时支持SSL加密通讯
私钥、证书存储路径为/usr/local/tomcat/conf/cert
每个虚拟主机都拥有独立的访问日志文件
配置tomcat集群环境

修改server.xml配置文件，创建两个域名的虚拟主机，修改如下两个参数块：
# cat /usr/local/tomcat/conf/server.xml
<Server>
   <Service>
     <Connector port=8080 />
     <Connector port=8009 />
     <Engine name="Catalina" defaultHost="localhost">
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
</Host>
… …

修改网站的首页目录为base,使用docBase参数可以修改默认网站首页路径
[root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
… …
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" reloadable="true"/>
</Host>
.. ..

跳转
1）当用户访问http://www.a.com/test打开/var/www/html目录下的页面
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
<Context path="/test" docBase="/var/www/html/" />
</Host>
… …

配置Tomcat支持SSL加密网站
1）创建加密用的私钥和证书文件
keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore     
//提示输入密码为:123456
//-genkeypair     生成密钥对
//-alias tomcat     密钥别名
//-keyalg RSA     定义密钥算法为RSA算法
//-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore

2)修改server.xml配置文件，创建支持加密连接的Connector
… …
<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false" sslProtocol="TLS" />
//备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可

配置Tomcat日志
.. ..
<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
<Context path="/test" docBase="/var/www/html/" />
#从默认localhost虚拟主机中把Valve这段复制过来，适当修改下即可
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix=" a_access" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
</Host>
<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
<Context path="" docBase="base" />
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix=" b_access" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
</Host>
.. ..

部署Varnish缓存服务器
gcc readline-devel ncurses-devel  pcre-devel python-docutils
tar -xf varnish-5.2.1.tar.gz 
./configure
make && make install
2.复制启动脚本及配置文件
cp  etc/example.vcl   /usr/local/etc/default.vcl
3）修改代理配置文件
[root@proxy ~]# vim  /usr/local/etc/default.vcl
backend default {
     .host = "192.168.2.100";
     .port = "80";
 }
4）启动服务
 [root@proxy ~]# varnishd  -f /usr/local/etc/default.vcl
//varnishd命令的其他选项说明如下：
//varnishd –s malloc,128M        定义varnish使用内存作为缓存，空间为128M
//varnishd –s file,/var/lib/varnish_storage.bin,1G 定义varnish使用文件作为缓存

1）查看varnish日志
[root@proxy ~]# varnishlog                        //varnish日志
[root@proxy ~]# varnishncsa                    //访问日志
更新缓存数据
[root@proxy ~]# varnishadm  
varnish> ban req.url ~ .*
//清空缓存数据，支持正则表达式
